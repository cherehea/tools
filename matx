#include <stdio.h>
#include <stdlib.h>

#define S_N 100
#define S_M 100

void print_static_matrix(int array[S_N][S_M], int n, int m);

int main() {
    int mode;
    int n, m;
    int s_array[S_N][S_M];

    printf(
        "input type of memory allocation:\n>\t1 - static\n>\t2 - array of pointers to array segments within "
        "one buffer\n>\t"
        "3 - array of pointers to segments of the second array\n\t4 - array of pointers to arrays\n>>> ");
    if (scanf("%d", &mode) == 1) {
        if (mode >= 1 && mode <= 4) {
            if (scanf("%d %d", &m, &n) == 2) {
                if (mode == 1) {
                    if (n < 100 && m < 100) {
                        int flag = 0;
                        for (int i = 0; i < n; ++i) {
                            for (int j = 0; j < m; ++j) {
                                if (scanf("%d", &s_array[i][j]) != 1) {
                                    printf("n/a");
                                    flag = 1;
                                    break;
                                }
                            }
                            if (flag) break;
                        }
                        print_static_matrix(s_array, n, m);
                    } else {
                        printf("n/a");
                    }
                } else if (mode == 2) {
                    printf("test");
                } else if (mode == 3) {
                    printf("test");
                } else if (mode == 4) {
                    printf("test");
                } else {
                    printf("n/a");
                }
            } else {
                printf("n/a");
            }
        } else {
            printf("n/a");
        }
    } else {
        printf("n/a");
    }

    return 0;
}

void print_static_matrix(int array[S_N][S_M], int n, int m) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < m; ++j) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
    for (int i = n - 1; i < n; ++i) {
        for (int j = 0; j < m - 1; ++j) {
            printf("%d ", array[i][j]);
        }
    }
    printf("%d", array[n - 1][m - 1]);
}


void print_matrix(int **array, int n, int m) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < m; ++j) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
    for (int i = n - 1; i < n; ++i) {
        for (int j = 0; j < m - 1; ++j) {
            printf("%d ", array[i][j]);
        }
    }
    printf("%d", array[n - 1][m - 1]);
}

void get_single_array_matrix(int n, int m) {
    int flag = 0;
    int* ptr = NULL;
    int** single_array_matrix;

    single_array_matrix = malloc(n * m * sizeof(int) + n * sizeof(int*));
    if(single_array_matrix == NULL) {
        printf("n/a");
        return;
    }
    ptr = (int*)(single_array_matrix + n);

    for (int i = 0; i < n; i++)
        single_array_matrix[i] = ptr + m * i;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(scanf("%d", &single_array_matrix[i][j]) != 1) {
                flag = 1;
                printf("n/a");
                break;
            }
        }
        if(flag)
            break;
    }
    
    if(!flag)
        print_matrix(single_array_matrix, n, m);
    
    free(single_array_matrix);
}





void get_pointer_array(int n, int m) {
    int flag = 0;
    int** pointer_array;

    pointer_array = malloc(n * sizeof(int*));
    if(pointer_array == NULL) {
        printf("n/a");
        return;
    }

    for(int i = 0; i < n; i++){
        pointer_array[i] = malloc(m * sizeof(int));
        if(pointer_array[i] == NULL) {
            for(int j = 0; j < i - 1; ++j) {
                free(pointer_array[j]);
            }
            printf("n/a");
            return;
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(scanf("%d", &pointer_array[i][j]) != 1) {
                printf("n/a");
                flag = 1;
                break;
            }
        }
        if(flag)
            break;
    }

    if(!flag)
        print_matrix(pointer_array, n, m);
    
    for(int i = 0; i < n; i++) {
        free(pointer_array[i]);
    }

    free(pointer_array);
}




void get_ptr_val_array(int n, int m) {
    int flag = 0;
    int** pointer_array = malloc(n * sizeof(int*));
    int* values_array = malloc(n * m * sizeof(int));

    pointer_array = malloc(n * sizeof(int*));
    if(pointer_array == NULL) {
        printf("n/a");
        return;
    }

    values_array = malloc(n * m * sizeof(int));
    if(values_array == NULL) {
        printf("n/a");
        free(pointer_array);
        return;
    }

    for(int i = 0; i < n; i++)
        pointer_array[i] = values_array + m * i;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(scanf("%d", &pointer_array[i][j]) != 1) {
                flag = 1;
                printf("n/a");
                break;
            }
        }
        if(flag)
            break;
    }
    if(!flag)
        print_matrix(pointer_array, n, m);

    free(values_array);
    free(pointer_array);
}
